pipeline {
    agent {
        docker {
            image 'ubuntu:latest'
            args '-u root' // 以 root 用户运行
        }
    }

    stages {
        stage('List Block Devices') {
            steps {
                script {
                    echo 'Step 1: Executing lsblk'
                    sh 'apt-get update && apt-get install -y util-linux && lsblk'
                }
            }
        }
        stage('clone git repo') {
            steps {
                script {
                    echo 'Step 2: Cloning git repo'

                    // add credentials
                    withCredentials([usernamePassword(credentialsId: 'gitlab', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh 'echo "username: $GIT_USERNAME" && echo "password: $GIT_PASSWORD"'
                       
                        sh 'df -h'
                        
                    }
                    
                    withCredentials([sshUserPrivateKey(credentialsId: 'github', keyFileVariable: 'SSH_KEY', passphraseVariable: 'SSH_PASSPHRASE')]){
                      sh 'echo "SSH_KEY: $SSH_KEY" && echo "SSH_PASSPHRASE: $SSH_PASSPHRASE"'
                      sh 'ls -la'
                      sh 'pwd'
                      # 添加 ssh 密钥到 ssh-agent
                      sh '''
                        eval "$(ssh-agent -s)"
                        ssh-add $SSH_KEY
                        # sh 'git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/laileman/pipeline.git'
                        git clonegit@github.com:laileman/pipeline.git pipeline-demo
                      '''
                    }
                    sh 'ls -la'
                    sh 'pwd'
                    sh 'cd pipeline-demo'
                    sh 'ls -la'
                    sh 'pwd'
              }
            
            }
        
        }

        stage('Parallel Execution') {
            steps {
                script {
                    def parallelSteps = [:]
                    for (int i = 1; i <= 4; i++) {
                        def stepIndex = i // 捕获当前的循环变量
                        parallelSteps["Step 2.${stepIndex}"] = {
                            script {
                                echo "Executing Step 2.${stepIndex}"
                                sh "echo 'This is Step 2.${stepIndex}'"
                                sh "pwd;ls -la"
                            }
                        }
                    }
                    parallel parallelSteps
                }
            }
        }

        stage('df -h - Part 1') {
            steps {
                script {
                    echo 'Step 3: df -h'
                    sh 'df -h'
                }
            }
        }

        stage('Docker Info - Part 2') {
            steps {
                script {
                    echo 'Step 4: Rechecking Docker Info'
                    sh 'ls -la'
                }
            }
        }
    }
}